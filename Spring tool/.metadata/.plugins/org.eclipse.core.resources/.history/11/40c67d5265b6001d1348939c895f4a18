package com.mockitotutorial.happyhotel.booking;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.*;


class Test03DefaultReturingCustomValues {
	
	private BookingService bookingService;
	private  PaymentService paymentServiceMock;
	private  RoomService roomServiceMock;
	private  BookingDAO bookingDAOMock;
	private  MailSender mailSenderMock;
	
	@BeforeEach
	void Setup() {
		this.paymentServiceMock=mock(PaymentService.class);  // dummy object
		this.roomServiceMock=mock(RoomService.class);
		this.bookingDAOMock=mock(BookingDAO.class);
		this.mailSenderMock=mock(MailSender.class);
		
		
		this.bookingService = new BookingService(paymentServiceMock, roomServiceMock, bookingDAOMock, mailSenderMock); 
	
		System.out.println("list for romm service"+roomServiceMock.getAvailableRooms());
		System.out.println("Object returned "+roomServiceMock.findAvailableRoomId(null));
        System.out.println("primitive returned " +roomServiceMock.getRoomCount());
	}

	@Test
	void should_countAvaliablePlaces_when_OneRoomAvailable() {
		// given
		List<Room> room=Arrays.asList(new Room("Room 1",5),new Room("Room 2",5));
		when(this.roomServiceMock.getAvailableRooms())
		.thenReturn(Collections.singletonList(new Room("Room 1",5)));
		int expected =5;
		// when
		int actual=bookingService.getAvailablePlaceCount();
		
		// then
		
		assertEquals(expected, actual);
			
	}
	@Test
	void should_countAvaliablePlaces_when_MultipleRoomAvailable() {
		// given
		
				when(this.roomServiceMock.getAvailableRooms())
				.thenReturn(Collections.singletonList(new Room("Room 1",2),));
				int expected =2;
				// when
				int actual=bookingService.getAvailablePlaceCount();
				
				// then
				
				assertEquals(expected, actual);
	}

}
